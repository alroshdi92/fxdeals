package com.bloomberg.fxdeals.service;

import com.bloomberg.fxdeals.model.FxDeal;
import com.bloomberg.fxdeals.repository.FxDealRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.time.LocalDateTime;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class FxDealServiceTest {

    private FxDealRepository fxDealRepository = Mockito.mock(FxDealRepository.class);
    private FxDealService fxDealService = new FxDealService(fxDealRepository);

    @Test
    public void testSaveDeal() {
        FxDeal fxDeal = new FxDeal();
        fxDeal.setDealUniqueId("123");
        fxDeal.setFromCurrencyIso("USD");
        fxDeal.setToCurrencyIso("EUR");
        fxDeal.setDealTimestamp(LocalDateTime.now());
        fxDeal.setDealAmount(1000.0);

        when(fxDealRepository.findById(any(String.class))).thenReturn(Optional.empty());
        when(fxDealRepository.save(any(FxDeal.class))).thenReturn(fxDeal);

        FxDeal savedDeal = fxDealService.saveDeal(fxDeal);
        assertNotNull(savedDeal);
        assertEquals("123", savedDeal.getDealUniqueId());
    }

    @Test
    public void testDuplicateDeal() {
        FxDeal fxDeal = new FxDeal();
        fxDeal.setDealUniqueId("123");
        fxDeal.setFromCurrencyIso("USD");
        fxDeal.setToCurrencyIso("EUR");
        fxDeal.setDealTimestamp(LocalDateTime.now());
        fxDeal.setDealAmount(1000.0);

        when(fxDealRepository.findById(any(String.class))).thenReturn(Optional.of(fxDeal));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            fxDealService.saveDeal(fxDeal);
        });

        String expectedMessage = "Deal with ID 123 already exists";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}
